{"ast":null,"code":"// // This function takes an events array, then uses map to create a new array with only locations.\n// // It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\n// // The set will remove al duplicates from the array.\n// import { mockData } from \"./mock-data\";\n// import axios from 'axios';\n// import NProgress from 'nprogress';\n// export const extractLocations = (events) => {\n//     var extractLocations = events.map((event) => event.location);\n//     var locations = [...new Set(extractLocations)];\n//     return locations;\n// };\n// const checkToken = async (accessToken) => {\n//     const result = await fetch(\n//         `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\n//     )\n//     .then((res) => res.json())\n//     .catch((error) => error.json());\n//     return result;\n// };\n// // export const getEvents = async () => {\n// //     NProgress.start();\n// //     if (window.location.href.startsWith('http://localhost')) {\n// //         NProgress.done();\n// //         return mockData;\n// //     }\n// //     const token = await getAccessToken();\n// //     if (token) {\n// //         removeQuery();\n// //         const url = 'https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-events' + '/' + token;\n// //         const result = await axios.get(url);\n// //         if (result.data) {\n// //             var locations = extractLocations(result.data.events);\n// //             localStorage.setItem('lastEvents', JSON.stringify(result.data));\n// //             localStorage.setItem('locations', JSON.stringify(locations));\n// //         }\n// //         NProgress.done();\n// //         return result.data.events;\n// //     }\n// // };\n// export const getEvents = async () => {\n//     NProgress.start();\n//     if (window.location.href.startsWith('http://localhost')) {\n//         NProgress.done();\n//         return mockData;\n//     }\n//     const token = await getAccessToken();\n//     if (token) {\n//         removeQuery();\n//         // eslint-disable-next-line\n//         const url = 'https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-events' + '/' + token;\n//         const result = await axios.get(url);\n//         if (result.data) {\n//             var locations = extractLocations(result.data.events);\n//             localStorage.setItem(\"lastEvents\", JSON.stringify(result.data));\n//             localStorage.setItem(\"locations\", JSON.stringify(locations));\n//         }\n//         NProgress.done();\n//         return result.data.events;\n//     }\n// };\n// const removeQuery = () => {\n//     if (window.history.pushState && window.location.pathname) {\n//         var newurl =\n//             window.location.protocol +\n//             '//' +\n//             window.location.host +\n//             window.location.pathname;\n//             window.history.pushState('', '', newurl);\n//     } else {\n//         newurl = \n//             window.location.protocol + '//' + \n//             window.location.host;\n//             window.history.pushState('', '', newurl);\n//     }\n// };\n// const getToken = async (code) => {\n//     const encodeCode = encodeURIComponent(code);\n//     const { access_token } = await fetch(\n//         'https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/token' + '/' + encodeCode\n//     )\n//         .then((res) => {\n//             return res.json();\n//         })\n//         .catch((error) => error);\n//     access_token && localStorage.setItem('access_token', access_token);\n//     return access_token;\n// };\n// export const getAccessToken = async () => {\n//     const accessToken = localStorage.getItem('access_token');\n//     const tokenCheck = accessToken && (await checkToken(accessToken));\n//     if (!accessToken || tokenCheck.error) {\n//         await localStorage.removeItem('access_token');\n//         const searchParams = new URLSearchParams(window.location.search);\n//         const code = await searchParams.get('code');\n//         if (!code) {\n//             const results = await axios.get(\n//                 'https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-auth-url'\n//             );\n//             const { authUrl } = results.data;\n//             return (window.location.href = authUrl);\n//         }\n//         return code && getToken(code);\n//     }\n//     return accessToken;\n// }\nimport { mockData } from \"./mock-data\";\nimport axios from 'axios';\nimport NProgress from 'nprogress';\n/**\r\n *\r\n * @param {*} events: list of events received from Google Calendar API in getEvents() function\r\n *\r\n * This function takes an events array, then uses map to create a new array with only locations.\r\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\r\n * The Set will remove all duplicates from the array.\r\n */\n\nexport const extractLocations = events => {\n  var extractLocations = events.map(event => event.location);\n  var locations = [...new Set(extractLocations)]; // A JavaScript Set is a collection of unique values\n\n  return locations;\n};\n/**\r\n * \r\n * @param {*} accessToken : access token obtained from local storage in getAccessToken function\r\n * @returns true or false depending of the token is still valid\r\n * \r\n * This function uses the googleapis api to check if an access token is still valid\r\n */\n\nexport const checkToken = async accessToken => {\n  const result = await fetch(`https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`).then(res => res.json()).catch(err => err.json());\n  return result;\n};\n/**\r\n * \r\n * @returns list of events\r\n * \r\n * This function connects to the Google Calendar API and returns an array of events \r\n */\n\nexport const getEvents = async () => {\n  NProgress.start(); // If the app is running on localhos, return the mock data \n\n  if (window.location.href.startsWith('http://localhost')) {\n    NProgress.done();\n    return mockData;\n  } // If the user is offline, return the list of events previously stored in the localStorage\n\n\n  if (!navigator.onLine) {\n    console.log('Im offline!');\n    const data = localStorage.getItem(\"lastEvents\");\n    NProgress.done();\n    return data ? JSON.parse(data).events : [];\n  }\n\n  const token = await getAccessToken();\n\n  if (token) {\n    removeQuery(); // eslint-disable-next-line\n\n    const url = 'https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-events' + '/' + token;\n    const result = await axios.get(url);\n\n    if (result.data) {\n      var locations = extractLocations(result.data.events);\n      localStorage.setItem(\"lastEvents\", JSON.stringify(result.data));\n      localStorage.setItem(\"locations\", JSON.stringify(locations));\n    }\n\n    NProgress.done();\n    return result.data.events;\n  }\n};\n/**\r\n * This is a function to remove code from URL\r\n */\n\nconst removeQuery = () => {\n  if (window.history.pushState && window.location.pathname) {\n    var newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname;\n    window.history.pushState(\"\", \"\", newurl);\n  } else {\n    newurl = window.location.protocol + \"//\" + window.location.host;\n    window.history.pushState(\"\", \"\", newurl);\n  }\n};\n/**\r\n * \r\n * @param {*} code : code retrieved from authorization server to exchange for access token (in getAccessToken() function)\r\n * @returns : new valid access token\r\n */\n\n\nconst getToken = async code => {\n  const encodeCode = encodeURIComponent(code); // eslint-disable-next-line\n\n  const {\n    access_token\n  } = await fetch('https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/token' + '/' + encodeCode).then(res => {\n    return res.json();\n  }).catch(err => err.json());\n  access_token && localStorage.setItem('access_token', access_token);\n  return access_token;\n};\n/**\r\n * Retrieve access token to access Google Calendar API\r\n * @returns a valid access token to access the Google Calendar API in the getEvents() function\r\n * \r\n */\n\n\nexport const getAccessToken = async () => {\n  const accessToken = localStorage.getItem('access_token');\n  const tokenCheck = accessToken && (await checkToken(accessToken));\n\n  if (!accessToken || tokenCheck.error) {\n    // If there is no accessToken (first user) or the token is invalid\n    await localStorage.removeItem('access_token');\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = await searchParams.get('code');\n\n    if (!code) {\n      const results = await axios.get('https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-auth-url');\n      const {\n        authURL\n      } = results.data;\n      return window.location.href = authURL;\n    }\n\n    return code && getToken(code); // Get a new token with the code\n  }\n\n  return accessToken;\n};","map":{"version":3,"sources":["A:/Desktop/Coding/careerfoundry/meet/src/api.js"],"names":["mockData","axios","NProgress","extractLocations","events","map","event","location","locations","Set","checkToken","accessToken","result","fetch","then","res","json","catch","err","getEvents","start","window","href","startsWith","done","navigator","onLine","console","log","data","localStorage","getItem","JSON","parse","token","getAccessToken","removeQuery","url","get","setItem","stringify","history","pushState","pathname","newurl","protocol","host","getToken","code","encodeCode","encodeURIComponent","access_token","tokenCheck","error","removeItem","searchParams","URLSearchParams","search","results","authURL"],"mappingsyB,aAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAIC,MAAD,IAAY;AACxC,MAAID,gBAAgB,GAAGC,MAAM,CAACC,GAAP,CAAWC,KAAK,IAAIA,KAAK,CAACC,QAA1B,CAAvB;AACA,MAAIC,SAAS,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQN,gBAAR,CAAJ,CAAhB,CAFwC,CAEO;;AAC/C,SAAOK,SAAP;AACH,CAJM;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAME,UAAU,GAAG,MAAOC,WAAP,IAAuB;AAC7C,QAAMC,MAAM,GAAG,MAAMC,KAAK,CAAE,+DAA8DF,WAAY,EAA5E,CAAL,CAChBG,IADgB,CACVC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADE,EAEhBC,KAFgB,CAETC,GAAD,IAASA,GAAG,CAACF,IAAJ,EAFC,CAArB;AAIA,SAAOJ,MAAP;AACH,CANM;AAQP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMO,SAAS,GAAG,YAAY;AACjCjB,EAAAA,SAAS,CAACkB,KAAV,GADiC,CAGjC;;AACA,MAAIC,MAAM,CAACd,QAAP,CAAgBe,IAAhB,CAAqBC,UAArB,CAAgC,kBAAhC,CAAJ,EAAyD;AACrDrB,IAAAA,SAAS,CAACsB,IAAV;AACA,WAAOxB,QAAP;AACH,GAPgC,CASjC;;;AACA,MAAI,CAACyB,SAAS,CAACC,MAAf,EAAuB;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,UAAMC,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAb;AACA7B,IAAAA,SAAS,CAACsB,IAAV;AACA,WAAOK,IAAI,GAAGG,IAAI,CAACC,KAAL,CAAWJ,IAAX,EAAiBzB,MAApB,GAA6B,EAAxC;AACH;;AAED,QAAM8B,KAAK,GAAG,MAAMC,cAAc,EAAlC;;AAEA,MAAID,KAAJ,EAAW;AACPE,IAAAA,WAAW,GADJ,CAEP;;AACA,UAAMC,GAAG,GAAG,8EAA8E,GAA9E,GAAoFH,KAAhG;AACA,UAAMtB,MAAM,GAAG,MAAMX,KAAK,CAACqC,GAAN,CAAUD,GAAV,CAArB;;AAEA,QAAIzB,MAAM,CAACiB,IAAX,EAAiB;AACb,UAAIrB,SAAS,GAAGL,gBAAgB,CAACS,MAAM,CAACiB,IAAP,CAAYzB,MAAb,CAAhC;AACA0B,MAAAA,YAAY,CAACS,OAAb,CAAqB,YAArB,EAAmCP,IAAI,CAACQ,SAAL,CAAe5B,MAAM,CAACiB,IAAtB,CAAnC;AACAC,MAAAA,YAAY,CAACS,OAAb,CAAqB,WAArB,EAAkCP,IAAI,CAACQ,SAAL,CAAehC,SAAf,CAAlC;AACH;;AACDN,IAAAA,SAAS,CAACsB,IAAV;AACA,WAAOZ,MAAM,CAACiB,IAAP,CAAYzB,MAAnB;AACH;AAEJ,CAlCM;AAoCP;AACA;AACA;;AAEA,MAAMgC,WAAW,GAAG,MAAM;AACtB,MAAIf,MAAM,CAACoB,OAAP,CAAeC,SAAf,IAA4BrB,MAAM,CAACd,QAAP,CAAgBoC,QAAhD,EAA0D;AACtD,QAAIC,MAAM,GACNvB,MAAM,CAACd,QAAP,CAAgBsC,QAAhB,GACA,IADA,GAEAxB,MAAM,CAACd,QAAP,CAAgBuC,IAFhB,GAGAzB,MAAM,CAACd,QAAP,CAAgBoC,QAJpB;AAKAtB,IAAAA,MAAM,CAACoB,OAAP,CAAeC,SAAf,CAAyB,EAAzB,EAA6B,EAA7B,EAAiCE,MAAjC;AACH,GAPD,MAOO;AACHA,IAAAA,MAAM,GAAGvB,MAAM,CAACd,QAAP,CAAgBsC,QAAhB,GAA2B,IAA3B,GAAkCxB,MAAM,CAACd,QAAP,CAAgBuC,IAA3D;AACAzB,IAAAA,MAAM,CAACoB,OAAP,CAAeC,SAAf,CAAyB,EAAzB,EAA6B,EAA7B,EAAiCE,MAAjC;AACH;AACJ,CAZD;AAcA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,QAAQ,GAAG,MAAOC,IAAP,IAAgB;AAC7B,QAAMC,UAAU,GAAGC,kBAAkB,CAACF,IAAD,CAArC,CAD6B,CAE7B;;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAmB,MAAMtC,KAAK,CAAC,yEAAyE,GAAzE,GAA+EoC,UAAhF,CAAL,CAC1BnC,IAD0B,CACpBC,GAAD,IAAS;AACX,WAAOA,GAAG,CAACC,IAAJ,EAAP;AACH,GAH0B,EAI1BC,KAJ0B,CAInBC,GAAD,IAASA,GAAG,CAACF,IAAJ,EAJW,CAA/B;AAMAmC,EAAAA,YAAY,IAAIrB,YAAY,CAACS,OAAb,CAAqB,cAArB,EAAqCY,YAArC,CAAhB;AAEA,SAAOA,YAAP;AACH,CAZD;AAcA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMhB,cAAc,GAAG,YAAY;AACtC,QAAMxB,WAAW,GAAGmB,YAAY,CAACC,OAAb,CAAqB,cAArB,CAApB;AAEA,QAAMqB,UAAU,GAAGzC,WAAW,KAAK,MAAMD,UAAU,CAACC,WAAD,CAArB,CAA9B;;AAEA,MAAI,CAACA,WAAD,IAAgByC,UAAU,CAACC,KAA/B,EAAsC;AAAE;AACpC,UAAMvB,YAAY,CAACwB,UAAb,CAAwB,cAAxB,CAAN;AACA,UAAMC,YAAY,GAAG,IAAIC,eAAJ,CAAoBnC,MAAM,CAACd,QAAP,CAAgBkD,MAApC,CAArB;AACA,UAAMT,IAAI,GAAG,MAAMO,YAAY,CAACjB,GAAb,CAAiB,MAAjB,CAAnB;;AAEA,QAAI,CAACU,IAAL,EAAW;AACP,YAAMU,OAAO,GAAG,MAAMzD,KAAK,CAACqC,GAAN,CAAU,6EAAV,CAAtB;AACA,YAAM;AAAEqB,QAAAA;AAAF,UAAcD,OAAO,CAAC7B,IAA5B;AACA,aAAQR,MAAM,CAACd,QAAP,CAAgBe,IAAhB,GAAuBqC,OAA/B;AACH;;AACD,WAAOX,IAAI,IAAID,QAAQ,CAACC,IAAD,CAAvB,CAVkC,CAUH;AAClC;;AACD,SAAOrC,WAAP;AACH,CAlBM","sourcesContent":["// // This function takes an events array, then uses map to create a new array with only locations.\r\n// // It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\r\n// // The set will remove al duplicates from the array.\r\n\r\n// import { mockData } from \"./mock-data\";\r\n// import axios from 'axios';\r\n// import NProgress from 'nprogress';\r\n\r\n\r\n// export const extractLocations = (events) => {\r\n//     var extractLocations = events.map((event) => event.location);\r\n//     var locations = [...new Set(extractLocations)];\r\n//     return locations;\r\n// };\r\n\r\n// const checkToken = async (accessToken) => {\r\n//     const result = await fetch(\r\n//         `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\r\n//     )\r\n//     .then((res) => res.json())\r\n//     .catch((error) => error.json());\r\n\r\n//     return result;\r\n// };\r\n\r\n// // export const getEvents = async () => {\r\n// //     NProgress.start();\r\n\r\n// //     if (window.location.href.startsWith('http://localhost')) {\r\n// //         NProgress.done();\r\n// //         return mockData;\r\n// //     }\r\n\r\n// //     const token = await getAccessToken();\r\n\r\n// //     if (token) {\r\n// //         removeQuery();\r\n// //         const url = 'https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-events' + '/' + token;\r\n// //         const result = await axios.get(url);\r\n// //         if (result.data) {\r\n// //             var locations = extractLocations(result.data.events);\r\n// //             localStorage.setItem('lastEvents', JSON.stringify(result.data));\r\n// //             localStorage.setItem('locations', JSON.stringify(locations));\r\n// //         }\r\n// //         NProgress.done();\r\n// //         return result.data.events;\r\n// //     }\r\n\r\n// // };\r\n\r\n// export const getEvents = async () => {\r\n//     NProgress.start();\r\n\r\n//     if (window.location.href.startsWith('http://localhost')) {\r\n//         NProgress.done();\r\n//         return mockData;\r\n//     }\r\n\r\n//     const token = await getAccessToken();\r\n\r\n//     if (token) {\r\n//         removeQuery();\r\n//         // eslint-disable-next-line\r\n//         const url = 'https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-events' + '/' + token;\r\n//         const result = await axios.get(url);\r\n\r\n//         if (result.data) {\r\n//             var locations = extractLocations(result.data.events);\r\n//             localStorage.setItem(\"lastEvents\", JSON.stringify(result.data));\r\n//             localStorage.setItem(\"locations\", JSON.stringify(locations));\r\n//         }\r\n//         NProgress.done();\r\n//         return result.data.events;\r\n//     }\r\n\r\n// };\r\n\r\n// const removeQuery = () => {\r\n//     if (window.history.pushState && window.location.pathname) {\r\n//         var newurl =\r\n//             window.location.protocol +\r\n//             '//' +\r\n//             window.location.host +\r\n//             window.location.pathname;\r\n//             window.history.pushState('', '', newurl);\r\n//     } else {\r\n//         newurl = \r\n//             window.location.protocol + '//' + \r\n//             window.location.host;\r\n//             window.history.pushState('', '', newurl);\r\n//     }\r\n// };\r\n\r\n// const getToken = async (code) => {\r\n//     const encodeCode = encodeURIComponent(code);\r\n//     const { access_token } = await fetch(\r\n//         'https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/token' + '/' + encodeCode\r\n//     )\r\n//         .then((res) => {\r\n//             return res.json();\r\n//         })\r\n//         .catch((error) => error);\r\n\r\n//     access_token && localStorage.setItem('access_token', access_token);\r\n\r\n//     return access_token;\r\n// };\r\n\r\n// export const getAccessToken = async () => {\r\n//     const accessToken = localStorage.getItem('access_token');\r\n//     const tokenCheck = accessToken && (await checkToken(accessToken));\r\n\r\n//     if (!accessToken || tokenCheck.error) {\r\n//         await localStorage.removeItem('access_token');\r\n//         const searchParams = new URLSearchParams(window.location.search);\r\n//         const code = await searchParams.get('code');\r\n//         if (!code) {\r\n//             const results = await axios.get(\r\n//                 'https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-auth-url'\r\n//             );\r\n//             const { authUrl } = results.data;\r\n//             return (window.location.href = authUrl);\r\n//         }\r\n//         return code && getToken(code);\r\n//     }\r\n//     return accessToken;\r\n// }\r\n\r\n\r\nimport { mockData } from \"./mock-data\";\r\nimport axios from 'axios';\r\nimport NProgress from 'nprogress';\r\n\r\n\r\n/**\r\n *\r\n * @param {*} events: list of events received from Google Calendar API in getEvents() function\r\n *\r\n * This function takes an events array, then uses map to create a new array with only locations.\r\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\r\n * The Set will remove all duplicates from the array.\r\n */\r\nexport const extractLocations = (events) => {\r\n    var extractLocations = events.map(event => event.location);\r\n    var locations = [...new Set(extractLocations)] // A JavaScript Set is a collection of unique values\r\n    return locations;\r\n};\r\n\r\n/**\r\n * \r\n * @param {*} accessToken : access token obtained from local storage in getAccessToken function\r\n * @returns true or false depending of the token is still valid\r\n * \r\n * This function uses the googleapis api to check if an access token is still valid\r\n */\r\n\r\nexport const checkToken = async (accessToken) => {\r\n    const result = await fetch(`https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`)\r\n        .then((res) => res.json())\r\n        .catch((err) => err.json());\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * \r\n * @returns list of events\r\n * \r\n * This function connects to the Google Calendar API and returns an array of events \r\n */\r\nexport const getEvents = async () => {\r\n    NProgress.start();\r\n\r\n    // If the app is running on localhos, return the mock data \r\n    if (window.location.href.startsWith('http://localhost')) {\r\n        NProgress.done();\r\n        return mockData;\r\n    }\r\n\r\n    // If the user is offline, return the list of events previously stored in the localStorage\r\n    if (!navigator.onLine) {\r\n        console.log('Im offline!');\r\n        const data = localStorage.getItem(\"lastEvents\");\r\n        NProgress.done();\r\n        return data ? JSON.parse(data).events : [];\r\n    }\r\n\r\n    const token = await getAccessToken();\r\n\r\n    if (token) {\r\n        removeQuery();\r\n        // eslint-disable-next-line\r\n        const url = 'https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-events' + '/' + token;\r\n        const result = await axios.get(url);\r\n\r\n        if (result.data) {\r\n            var locations = extractLocations(result.data.events);\r\n            localStorage.setItem(\"lastEvents\", JSON.stringify(result.data));\r\n            localStorage.setItem(\"locations\", JSON.stringify(locations));\r\n        }\r\n        NProgress.done();\r\n        return result.data.events;\r\n    }\r\n\r\n};\r\n\r\n/**\r\n * This is a function to remove code from URL\r\n */\r\n\r\nconst removeQuery = () => {\r\n    if (window.history.pushState && window.location.pathname) {\r\n        var newurl =\r\n            window.location.protocol +\r\n            \"//\" +\r\n            window.location.host +\r\n            window.location.pathname;\r\n        window.history.pushState(\"\", \"\", newurl);\r\n    } else {\r\n        newurl = window.location.protocol + \"//\" + window.location.host;\r\n        window.history.pushState(\"\", \"\", newurl);\r\n    }\r\n};\r\n\r\n/**\r\n * \r\n * @param {*} code : code retrieved from authorization server to exchange for access token (in getAccessToken() function)\r\n * @returns : new valid access token\r\n */\r\n\r\nconst getToken = async (code) => {\r\n    const encodeCode = encodeURIComponent(code);\r\n    // eslint-disable-next-line\r\n    const { access_token } = await fetch('https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/token' + '/' + encodeCode)\r\n        .then((res) => {\r\n            return res.json();\r\n        })\r\n        .catch((err) => err.json());\r\n\r\n    access_token && localStorage.setItem('access_token', access_token);\r\n\r\n    return access_token;\r\n}\r\n\r\n/**\r\n * Retrieve access token to access Google Calendar API\r\n * @returns a valid access token to access the Google Calendar API in the getEvents() function\r\n * \r\n */\r\n\r\nexport const getAccessToken = async () => {\r\n    const accessToken = localStorage.getItem('access_token');\r\n\r\n    const tokenCheck = accessToken && (await checkToken(accessToken));\r\n\r\n    if (!accessToken || tokenCheck.error) { // If there is no accessToken (first user) or the token is invalid\r\n        await localStorage.removeItem('access_token');\r\n        const searchParams = new URLSearchParams(window.location.search);\r\n        const code = await searchParams.get('code');\r\n\r\n        if (!code) {\r\n            const results = await axios.get('https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-auth-url');\r\n            const { authURL } = results.data;\r\n            return (window.location.href = authURL);\r\n        }\r\n        return code && getToken(code); // Get a new token with the code\r\n    }\r\n    return accessToken;\r\n};"]},"metadata":{},"sourceType":"module"}