{"ast":null,"code":"// This function takes an events array, then uses map to create a new array with only locations.\n// It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\n// The set will remove al duplicates from the array.\nimport { mockData } from \"./mock-data\";\nimport axios from 'axios';\nimport NProgress from 'nprogress';\nexport const extractLocations = events => {\n  var extractLocations = events.map(event => event.location);\n  var locations = [...new Set(extractLocations)];\n  return locations;\n};\n\nconst checkToken = async accessToken => {\n  const result = await fetch(`https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`).then(res => res.json()).catch(error => error.json());\n  return result;\n};\n\nconst removeQuery = () => {\n  if (window.history.pushState && window.location.pathname) {\n    var newurl = window.location.protocol + '//' + window.location.host + window.location.pathname;\n    window.history.pushState('', '', newurl);\n  } else {\n    newurl = window.location.protocol + '//' + window.location.host;\n    window.history.pushState('', '', newurl);\n  }\n};\n\nexport const getEvents = async () => {\n  NProgress.start();\n\n  if (window.location.href.startsWith('http://localhost')) {\n    return mockData;\n  }\n\n  const token = await getAccessToken();\n\n  if (token) {\n    removeQuery();\n    const url = 'https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-events' + '/' + token;\n    const result = await axios.get(url);\n\n    if (result.data) {\n      var locations = extractLocations(result.data.events);\n      localStorage.setItem('lastEvents', JSON.stringify(result.data));\n      localStorage.setItem('locations', JSON.stringify(locations));\n    }\n\n    NProgress.done();\n    return result.data.events;\n  }\n};\n\nconst getToken = async code => {\n  const encodeCode = encodeURIComponent(code);\n  const {\n    access_token\n  } = await fetch('https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/token' + '/' + encodeCode).then(res => {\n    return res.json();\n  }).catch(error => error);\n  access_token && localStorage.setItem('access_token', access_token);\n  return access_token;\n};\n\nexport const getAccessToken = async () => {\n  const accessToken = localStorage.getItem('access_token');\n  const tokenCheck = accessToken && (await checkToken(accessToken));\n\n  if (!accessToken || tokenCheck.error) {\n    await localStorage.removeItem('access_token');\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = await searchParams.get('code');\n\n    if (!code) {\n      const results = await axios.get('https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-auth-url');\n      const {\n        authUrl\n      } = results.data;\n      return window.location.href = authUrl;\n    }\n\n    return code && getToken(code);\n  }\n\n  return accessToken;\n};","map":{"version":3,"sources":["A:/Desktop/Coding/careerfoundry/meet/src/api.js"],"names":["mockData","axios","NProgress","extractLocations","events","map","event","location","locations","Set","checkToken","accessToken","result","fetch","then","res","json","catch","error","removeQuery","window","history","pushState","pathname","newurl","protocol","host","getEvents","start","href","startsWith","token","getAccessToken","url","get","data","localStorage","setItem","JSON","stringify","done","getToken","code","encodeCode","encodeURIComponent","access_token","getItem","tokenCheck","removeItem","searchParams","URLSearchParams","search","results","authUrl"],"mappings":"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","sourcesContent":["// This function takes an events array, then uses map to create a new array with only locations.\r\n// It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\r\n// The set will remove al duplicates from the array.\r\n\r\nimport { mockData } from \"./mock-data\";\r\nimport axios from 'axios';\r\nimport NProgress from 'nprogress';\r\n\r\n\r\nexport const extractLocations = (events) => {\r\n    var extractLocations = events.map((event) => event.location);\r\n    var locations = [...new Set(extractLocations)];\r\n    return locations;\r\n};\r\n\r\nconst checkToken = async (accessToken) => {\r\n    const result = await fetch(\r\n        `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\r\n    )\r\n    .then((res) => res.json())\r\n    .catch((error) => error.json());\r\n\r\n    return result;\r\n};\r\n\r\nconst removeQuery = () => {\r\n    if (window.history.pushState && window.location.pathname) {\r\n        var newurl =\r\n            window.location.protocol +\r\n            '//' +\r\n            window.location.host +\r\n            window.location.pathname;\r\n        window.history.pushState('', '', newurl);\r\n    } else {\r\n        newurl = window.location.protocol + '//' + window.location.host;\r\n        window.history.pushState('', '', newurl);\r\n    }\r\n};\r\n\r\nexport const getEvents = async () => {\r\n    NProgress.start();\r\n\r\n    if (window.location.href.startsWith('http://localhost')) {\r\n        return mockData;\r\n    }\r\n\r\n    const token = await getAccessToken();\r\n\r\n    if (token) {\r\n        removeQuery();\r\n        const url = 'https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-events' + '/' + token;\r\n        const result = await axios.get(url);\r\n        if (result.data) {\r\n            var locations = extractLocations(result.data.events);\r\n            localStorage.setItem('lastEvents', JSON.stringify(result.data));\r\n            localStorage.setItem('locations', JSON.stringify(locations));\r\n        }\r\n        NProgress.done();\r\n        return result.data.events;\r\n    }\r\n\r\n};\r\n\r\nconst getToken = async (code) => {\r\n    const encodeCode = encodeURIComponent(code);\r\n    const { access_token } = await fetch(\r\n        'https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/token' + '/' + encodeCode\r\n    )\r\n        .then((res) => {\r\n            return res.json();\r\n        })\r\n        .catch((error) => error);\r\n\r\n    access_token && localStorage.setItem('access_token', access_token);\r\n\r\n    return access_token;\r\n};\r\n\r\nexport const getAccessToken = async () => {\r\n    const accessToken = localStorage.getItem('access_token');\r\n    const tokenCheck = accessToken && (await checkToken(accessToken));\r\n\r\n    if (!accessToken || tokenCheck.error) {\r\n        await localStorage.removeItem('access_token');\r\n        const searchParams = new URLSearchParams(window.location.search);\r\n        const code = await searchParams.get('code');\r\n        if (!code) {\r\n            const results = await axios.get(\r\n                'https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-auth-url'\r\n            );\r\n            const { authUrl } = results.data;\r\n            return (window.location.href = authUrl);\r\n        }\r\n        return code && getToken(code);\r\n    }\r\n    return accessToken;\r\n}"]},"metadata":{},"sourceType":"module"}