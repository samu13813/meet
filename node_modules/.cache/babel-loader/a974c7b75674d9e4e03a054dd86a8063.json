{"ast":null,"code":"// This function takes an events array, then uses map to create a new array with only locations.\n// It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\n// The set will remove al duplicates from the array.\nimport { mockData } from \"./mock-data\";\nimport axios from 'axios';\nimport NProgress from 'nprogress';\nexport const extractLocations = events => {\n  var extractLocations = events.map(event => event.location);\n  var locations = [...new Set(extractLocations)];\n  return locations;\n};\n\nconst checkToken = async accessToken => {\n  const result = await fetch(`https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`).then(res => res.json()).catch(error => error.json());\n  return result;\n}; // export const getEvents = async () => {\n//     NProgress.start();\n//     if (window.location.href.startsWith('http://localhost')) {\n//         NProgress.done();\n//         return mockData;\n//     }\n//     const token = await getAccessToken();\n//     if (token) {\n//         removeQuery();\n//         const url = 'https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-events' + '/' + token;\n//         const result = await axios.get(url);\n//         if (result.data) {\n//             var locations = extractLocations(result.data.events);\n//             localStorage.setItem('lastEvents', JSON.stringify(result.data));\n//             localStorage.setItem('locations', JSON.stringify(locations));\n//         }\n//         NProgress.done();\n//         return result.data.events;\n//     }\n// };\n\n\nexport const getEvents = async () => {\n  NProgress.start();\n\n  if (window.location.href.startsWith('http://localhost')) {\n    NProgress.done();\n    return mockData;\n  }\n\n  const token = await getAccessToken();\n\n  if (token) {\n    removeQuery(); // eslint-disable-next-line\n\n    const url = 'https://4hmms9mb9a.execute-api.eu-central-1.amazonaws.com/dev/api/get-events' + '/' + token;\n    const result = await axios.get(url);\n\n    if (result.data) {\n      var locations = extractLocations(result.data.events);\n      localStorage.setItem(\"lastEvents\", JSON.stringify(result.data));\n      localStorage.setItem(\"locations\", JSON.stringify(locations));\n    }\n\n    NProgress.done();\n    return result.data.events;\n  }\n};\n\nconst removeQuery = () => {\n  if (window.history.pushState && window.location.pathname) {\n    var newurl = window.location.protocol + '//' + window.location.host + window.location.pathname;\n    window.history.pushState('', '', newurl);\n  } else {\n    newurl = window.location.protocol + '//' + window.location.host;\n    window.history.pushState('', '', newurl);\n  }\n};\n\nconst getToken = async code => {\n  const encodeCode = encodeURIComponent(code);\n  const {\n    access_token\n  } = await fetch('https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/token' + '/' + encodeCode).then(res => {\n    return res.json();\n  }).catch(error => error);\n  access_token && localStorage.setItem('access_token', access_token);\n  return access_token;\n};\n\nexport const getAccessToken = async () => {\n  const accessToken = localStorage.getItem('access_token');\n  const tokenCheck = accessToken && (await checkToken(accessToken));\n\n  if (!accessToken || tokenCheck.error) {\n    await localStorage.removeItem('access_token');\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = await searchParams.get('code');\n\n    if (!code) {\n      const results = await axios.get('https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-auth-url');\n      const {\n        authUrl\n      } = results.data;\n      return window.location.href = authUrl;\n    }\n\n    return code && getToken(code);\n  }\n\n  return accessToken;\n};","map":{"version":3,"sources":["A:/Desktop/Coding/careerfoundry/meet/src/api.js"],"names":["mockData","axios","NProgress","extractLocations","events","map","event","location","locations","Set","checkToken","accessToken","result","fetch","then","res","json","catch","error","getEvents","start","window","href","startsWith","done","token","getAccessToken","removeQuery","url","get","data","localStorage","setItem","JSON","stringify","history","pushState","pathname","newurl","protocol","host","getToken","code","encodeCode","encodeURIComponent","access_token","getItem","tokenCheck","removeItem","searchParams","URLSearchParams","search","results","authUrl"],"mappings":"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","sourcesContent":["// This function takes an events array, then uses map to create a new array with only locations.\r\n// It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\r\n// The set will remove al duplicates from the array.\r\n\r\nimport { mockData } from \"./mock-data\";\r\nimport axios from 'axios';\r\nimport NProgress from 'nprogress';\r\n\r\n\r\nexport const extractLocations = (events) => {\r\n    var extractLocations = events.map((event) => event.location);\r\n    var locations = [...new Set(extractLocations)];\r\n    return locations;\r\n};\r\n\r\nconst checkToken = async (accessToken) => {\r\n    const result = await fetch(\r\n        `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\r\n    )\r\n    .then((res) => res.json())\r\n    .catch((error) => error.json());\r\n\r\n    return result;\r\n};\r\n\r\n// export const getEvents = async () => {\r\n//     NProgress.start();\r\n\r\n//     if (window.location.href.startsWith('http://localhost')) {\r\n//         NProgress.done();\r\n//         return mockData;\r\n//     }\r\n\r\n//     const token = await getAccessToken();\r\n\r\n//     if (token) {\r\n//         removeQuery();\r\n//         const url = 'https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-events' + '/' + token;\r\n//         const result = await axios.get(url);\r\n//         if (result.data) {\r\n//             var locations = extractLocations(result.data.events);\r\n//             localStorage.setItem('lastEvents', JSON.stringify(result.data));\r\n//             localStorage.setItem('locations', JSON.stringify(locations));\r\n//         }\r\n//         NProgress.done();\r\n//         return result.data.events;\r\n//     }\r\n\r\n// };\r\n\r\nexport const getEvents = async () => {\r\n    NProgress.start();\r\n\r\n    if (window.location.href.startsWith('http://localhost')) {\r\n        NProgress.done();\r\n        return mockData;\r\n    }\r\n\r\n    const token = await getAccessToken();\r\n\r\n    if (token) {\r\n        removeQuery();\r\n        // eslint-disable-next-line\r\n        const url = 'https://4hmms9mb9a.execute-api.eu-central-1.amazonaws.com/dev/api/get-events' + '/' + token;\r\n        const result = await axios.get(url);\r\n\r\n        if (result.data) {\r\n            var locations = extractLocations(result.data.events);\r\n            localStorage.setItem(\"lastEvents\", JSON.stringify(result.data));\r\n            localStorage.setItem(\"locations\", JSON.stringify(locations));\r\n        }\r\n        NProgress.done();\r\n        return result.data.events;\r\n    }\r\n\r\n};\r\n\r\nconst removeQuery = () => {\r\n    if (window.history.pushState && window.location.pathname) {\r\n        var newurl =\r\n            window.location.protocol +\r\n            '//' +\r\n            window.location.host +\r\n            window.location.pathname;\r\n            window.history.pushState('', '', newurl);\r\n    } else {\r\n        newurl = \r\n            window.location.protocol + '//' + \r\n            window.location.host;\r\n            window.history.pushState('', '', newurl);\r\n    }\r\n};\r\n\r\nconst getToken = async (code) => {\r\n    const encodeCode = encodeURIComponent(code);\r\n    const { access_token } = await fetch(\r\n        'https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/token' + '/' + encodeCode\r\n    )\r\n        .then((res) => {\r\n            return res.json();\r\n        })\r\n        .catch((error) => error);\r\n\r\n    access_token && localStorage.setItem('access_token', access_token);\r\n\r\n    return access_token;\r\n};\r\n\r\nexport const getAccessToken = async () => {\r\n    const accessToken = localStorage.getItem('access_token');\r\n    const tokenCheck = accessToken && (await checkToken(accessToken));\r\n\r\n    if (!accessToken || tokenCheck.error) {\r\n        await localStorage.removeItem('access_token');\r\n        const searchParams = new URLSearchParams(window.location.search);\r\n        const code = await searchParams.get('code');\r\n        if (!code) {\r\n            const results = await axios.get(\r\n                'https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-auth-url'\r\n            );\r\n            const { authUrl } = results.data;\r\n            return (window.location.href = authUrl);\r\n        }\r\n        return code && getToken(code);\r\n    }\r\n    return accessToken;\r\n}"]},"metadata":{},"sourceType":"module"}