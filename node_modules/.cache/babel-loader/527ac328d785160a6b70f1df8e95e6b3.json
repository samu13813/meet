{"ast":null,"code":"import _asyncToGenerator from\"A:/Desktop/Coding/careerfoundry/meet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _toConsumableArray from\"A:/Desktop/Coding/careerfoundry/meet/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _regeneratorRuntime from\"A:\\\\Desktop\\\\Coding\\\\careerfoundry\\\\meet\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";// This function takes an events array, then uses map to create a new array with only locations.\n// It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\n// The set will remove al duplicates from the array.\nimport{mockData}from\"./mock-data\";export var extractLocations=function extractLocations(events){var extractLocations=events.map(function(event){return event.location;});var locations=_toConsumableArray(new Set(extractLocations));return locations;};export var getEvents=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",mockData);case 1:case\"end\":return _context.stop();}}},_callee);}));return function getEvents(){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["A:/Desktop/Coding/careerfoundry/meet/src/api.js"],"names":["mockData","extractLocations","events","map","event","location","locations","Set","getEvents"],"mappings":"kYAAA;AACA;AACA;AAEA,OAASA,QAAT,KAAyB,aAAzB,CAGA,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,0BAACC,MAAD,CAAY,CACxC,GAAID,CAAAA,gBAAgB,CAAGC,MAAM,CAACC,GAAP,CAAW,SAACC,KAAD,QAAWA,CAAAA,KAAK,CAACC,QAAjB,EAAX,CAAvB,CACA,GAAIC,CAAAA,SAAS,oBAAO,GAAIC,CAAAA,GAAJ,CAAQN,gBAAR,CAAP,CAAb,CACA,MAAOK,CAAAA,SAAP,CACH,CAJM,CAMP,MAAO,IAAME,CAAAA,SAAS,0FAAG,mKACdR,QADc,wDAAH,kBAATQ,CAAAA,SAAS,0CAAf","sourcesContent":["// This function takes an events array, then uses map to create a new array with only locations.\r\n// It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\r\n// The set will remove al duplicates from the array.\r\n\r\nimport { mockData } from \"./mock-data\";\r\n\r\n\r\nexport const extractLocations = (events) => {\r\n    var extractLocations = events.map((event) => event.location);\r\n    var locations = [...new Set(extractLocations)];\r\n    return locations;\r\n};\r\n\r\nexport const getEvents = async () => {\r\n    return mockData;\r\n};"]},"metadata":{},"sourceType":"module"}