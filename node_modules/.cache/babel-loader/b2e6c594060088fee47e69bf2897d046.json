{"ast":null,"code":"import { mockData } from \"./mock-data\";\nimport axios from \"axios\";\nimport NProgress from \"nprogress\";\n/*\r\n This function takes an events array, then uses map to create a new array with only locations.\r\n It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\r\n The Set will remove all duplicates from the array.\r\n */\n\nexport const extractLocations = events => {\n  var extractLocations = events.map(event => event.location);\n  var locations = [...new Set(extractLocations)];\n  return locations;\n};\nexport const checkToken = async accessToken => {\n  const result = await fetch(`https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`).then(res => res.json()).catch(error => error.json());\n  return result;\n};\nexport const getEvents = async () => {\n  NProgress.start();\n\n  if (window.location.href.startsWith(\"http://localhost\")) {\n    NProgress.done();\n    return mockData;\n  }\n\n  if (!navigator.onLine) {\n    const data = localStorage.getItem(\"lastEvents\");\n    NProgress.done(); // console.log(events);\n\n    return data ? JSON.parse(data).events : [];\n    ;\n  }\n\n  const token = await getAccessToken();\n\n  if (token) {\n    removeQuery(); // eslint-disable-next-line\n\n    const url = 'https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-events' + '/' + token;\n    const result = await axios.get(url);\n\n    if (result.data) {\n      var locations = extractLocations(result.data.events);\n      localStorage.setItem(\"lastEvents\", JSON.stringify(result.data));\n      localStorage.setItem(\"locations\", JSON.stringify(locations));\n    }\n\n    NProgress.done();\n    return result.data.events;\n  }\n};\nexport const getAccessToken = async () => {\n  console.log(access_token);\n  const accessToken = localStorage.getItem('access_token');\n  const tokenCheck = accessToken && (await checkToken(accessToken));\n\n  if (!accessToken || tokenCheck.error) {\n    await localStorage.removeItem(\"access_token\");\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = await searchParams.get(\"code\");\n    console.log(code);\n\n    if (!code) {\n      const results = await axios.get(\"https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-auth-url\");\n      const {\n        authUrl\n      } = results.data;\n      return window.location.href = authUrl;\n    }\n\n    return code && getToken(code);\n  }\n\n  return accessToken;\n};\n\nconst removeQuery = () => {\n  if (window.history.pushState && window.location.pathname) {\n    var newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname;\n    window.history.pushState(\"\", \"\", newurl);\n  } else {\n    newurl = window.location.protocol + \"//\" + window.location.host;\n    window.history.pushState(\"\", \"\", newurl);\n  }\n};\n\nconst getToken = async code => {\n  console.log('getToken');\n  const encodeCode = encodeURIComponent(code);\n  const {\n    access_token\n  } = await fetch(`https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/token/${encodeCode}`).then(res => {\n    return res.json();\n  }).catch(error => error);\n  access_token && localStorage.setItem(\"access_token\", access_token);\n  console.log(access_token + 'access-token');\n  return access_token;\n};","map":{"version":3,"sources":["A:/Desktop/Coding/careerfoundry/meet/src/api.js"],"names":["mockData","axios","NProgress","extractLocations","events","map","event","location","locations","Set","checkToken","accessToken","result","fetch","then","res","json","catch","error","getEvents","start","window","href","startsWith","done","navigator","onLine","data","localStorage","getItem","JSON","parse","token","getAccessToken","removeQuery","url","get","setItem","stringify","console","log","access_token","tokenCheck","removeItem","searchParams","URLSearchParams","search","code","results","authUrl","getToken","history","pushState","pathname","newurl","protocol","host","encodeCode","encodeURIComponent"],"mappings":"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","sourcesContent":["import { mockData } from \"./mock-data\";\r\nimport axios from \"axios\";\r\nimport NProgress from \"nprogress\";\r\n\r\n/*\r\n This function takes an events array, then uses map to create a new array with only locations.\r\n It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\r\n The Set will remove all duplicates from the array.\r\n */\r\n\r\n export const extractLocations = (events) => {\r\n    var extractLocations = events.map((event) => event.location);\r\n    var locations = [...new Set(extractLocations)];\r\n    return locations;\r\n  };\r\n\r\n  export const checkToken = async (accessToken) => {\r\n    const result = await fetch(`https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`)\r\n      .then((res) => res.json())\r\n      .catch((error) => error.json());\r\n    return result;\r\n  };\r\n\r\n  export const getEvents = async () => {\r\n    NProgress.start();\r\n  \r\n    if (window.location.href.startsWith(\"http://localhost\")) {\r\n      NProgress.done();\r\n      return mockData;\r\n    }\r\n\r\n    if (!navigator.onLine) {\r\n      const data = localStorage.getItem(\"lastEvents\");\r\n      NProgress.done();\r\n      // console.log(events);\r\n      return data ? JSON.parse(data).events:[];;\r\n    }\r\n\r\n    const token = await getAccessToken();\r\n\r\n    if (token) {\r\n      removeQuery();\r\n      // eslint-disable-next-line\r\n      const url = 'https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-events' + '/' + token;\r\n      const result = await axios.get(url);\r\n      if (result.data) {\r\n        var locations = extractLocations(result.data.events);\r\n        localStorage.setItem(\"lastEvents\", JSON.stringify(result.data));\r\n        localStorage.setItem(\"locations\", JSON.stringify(locations));\r\n      }\r\n      NProgress.done();\r\n      return result.data.events;\r\n    }\r\n  };\r\n\r\n  export const getAccessToken = async () => {\r\n      console.log(access_token);\r\n    const accessToken = localStorage.getItem('access_token');\r\n    const tokenCheck = accessToken && (await checkToken(accessToken));\r\n\r\n    if (!accessToken || tokenCheck.error) {\r\n      await localStorage.removeItem(\"access_token\");\r\n      const searchParams = new URLSearchParams(window.location.search);\r\n      const code = await searchParams.get(\"code\");\r\n      console.log(code);\r\n\r\n      if (!code) {\r\n        const results = await axios.get(\"https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-auth-url\");\r\n        const { authUrl } = results.data;\r\n        return (window.location.href = authUrl);\r\n        }\r\n        return code && getToken(code);\r\n      }\r\n    return accessToken;\r\n  }\r\n\r\n  const removeQuery = () => {\r\n    if (window.history.pushState && window.location.pathname) {\r\n      var newurl = window.location.protocol + \"//\" + \r\n        window.location.host +\r\n        window.location.pathname;\r\n      window.history.pushState(\"\", \"\", newurl);\r\n    } else {\r\n      newurl = window.location.protocol + \"//\" + window.location.host;\r\n      window.history.pushState(\"\", \"\", newurl);\r\n    }\r\n  };\r\n  \r\n  const getToken = async (code) => {\r\n    console.log('getToken');\r\n    const encodeCode = encodeURIComponent(code);\r\n    const { access_token } = await fetch(`https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/token/${encodeCode}`,)\r\n    .then((res) => {\r\n      return res.json();\r\n    })\r\n    .catch((error) => error);\r\n  \r\n    access_token && localStorage.setItem(\"access_token\", access_token);\r\n    console.log(access_token + 'access-token');\r\n    \r\n    return access_token;\r\n  };"]},"metadata":{},"sourceType":"module"}