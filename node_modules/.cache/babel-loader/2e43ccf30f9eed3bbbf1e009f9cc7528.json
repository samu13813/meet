{"ast":null,"code":"// // This function takes an events array, then uses map to create a new array with only locations.\n// // It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\n// // The set will remove al duplicates from the array.\nimport { mockData } from \"./mock-data\";\nimport axios from 'axios';\nimport NProgress from 'nprogress';\nexport const extractLocations = events => {\n  var extractLocations = events.map(event => event.location);\n  var locations = [...new Set(extractLocations)];\n  return locations;\n};\nexport const checkToken = async accessToken => {\n  console.log('checkToken: ' + accessToken);\n  const result = await fetch(`https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`).then(res => res.json()).catch(error => error.json());\n  return result;\n};\n\nconst getToken = async code => {\n  removeQuery();\n  const encodeCode = encodeURIComponent(code);\n  const {\n    access_token\n  } = await fetch(`https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/token/${encodeCode}`).then(res => {\n    return res.json();\n  }).catch(error => error);\n  console.log(access_token + 'access_token log');\n  access_token && localStorage.setItem('access_token', access_token);\n  return access_token;\n};\n\nexport const getAccessToken = async () => {\n  const accessToken = localStorage.getItem('access_token');\n  console.log('accessToken: ' + accessToken);\n  const tokenCheck = accessToken && (await checkToken(accessToken));\n\n  if (!accessToken || tokenCheck.error) {\n    await localStorage.removeItem('access_token');\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = await searchParams.get('code');\n\n    if (!code) {\n      const results = await axios.get('https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-auth-url');\n      const {\n        authUrl\n      } = results.data;\n      return window.location.href = authUrl;\n    }\n\n    return code && getToken(code);\n  }\n\n  return accessToken;\n};\nexport const getEvents = async () => {\n  NProgress.start();\n\n  if (window.location.href.startsWith('http://localhost')) {\n    NProgress.done();\n    return mockData;\n  }\n\n  if (!navigator.onLine) {\n    console.log('Im offline');\n    const data = await localStorage.getItem(\"lastEvents\");\n    NProgress.done();\n    return data ? JSON.parse(data).events : [];\n  }\n\n  const token = await getAccessToken();\n\n  if (token) {\n    console.log('getEvents token: ', token);\n    removeQuery();\n    const url = `https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-events/${token}`;\n    const result = await axios.get(url);\n\n    if (result.data) {\n      var locations = extractLocations(result.data.events);\n      localStorage.setItem('lastEvents', JSON.stringify(result.data));\n      localStorage.setItem('locations', JSON.stringify(locations));\n    }\n\n    NProgress.done();\n    return result.data.events;\n  }\n}; // export const getEvents = async () => {\n//     return mockData;\n// };\n\nconst removeQuery = () => {\n  if (window.history.pushState && window.location.pathname) {\n    var newurl = window.location.protocol + '//' + window.location.host + window.location.pathname;\n    window.history.pushState('', '', newurl);\n  } else {\n    newurl = window.location.protocol + '//' + window.location.host;\n    window.history.pushState('', '', newurl);\n  }\n};","map":{"version":3,"sources":["A:/Desktop/Coding/careerfoundry/meet/src/api.js"],"names":["mockData","axios","NProgress","extractLocations","events","map","event","location","locations","Set","checkToken","accessToken","console","log","result","fetch","then","res","json","catch","error","getToken","code","removeQuery","encodeCode","encodeURIComponent","access_token","localStorage","setItem","getAccessToken","getItem","tokenCheck","removeItem","searchParams","URLSearchParams","window","search","get","results","authUrl","data","href","getEvents","start","startsWith","done","navigator","onLine","JSON","parse","token","url","stringify","history","pushState","pathname","newurl","protocol","host"],"mappings":"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","sourcesContent":["// // This function takes an events array, then uses map to create a new array with only locations.\r\n// // It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\r\n// // The set will remove al duplicates from the array.\r\n\r\nimport { mockData } from \"./mock-data\";\r\nimport axios from 'axios';\r\nimport NProgress from 'nprogress';\r\n\r\n\r\nexport const extractLocations = (events) => {\r\n    var extractLocations = events.map((event) => event.location);\r\n    var locations = [...new Set(extractLocations)];\r\n    return locations;\r\n};\r\n\r\nexport const checkToken = async (accessToken) => {\r\n    console.log('checkToken: ' + accessToken);\r\n    const result = await fetch(\r\n        `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\r\n    )\r\n    .then((res) => res.json())\r\n    .catch((error) => error.json());\r\n\r\n    return result;\r\n};\r\n\r\nconst getToken = async (code) => {\r\n    removeQuery();\r\n    const encodeCode = encodeURIComponent(code);\r\n\r\n    const { access_token } = await fetch(\r\n        `https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/token/${encodeCode}`\r\n    )\r\n        .then((res) => {\r\n            return res.json();\r\n        })\r\n        .catch((error) => error);\r\n        console.log(access_token + 'access_token log');\r\n    access_token && localStorage.setItem('access_token', access_token);\r\n\r\n    return access_token;\r\n};\r\n\r\nexport const getAccessToken = async () => {\r\n    const accessToken = localStorage.getItem('access_token');\r\n    console.log('accessToken: ' + accessToken);\r\n    const tokenCheck = accessToken && (await checkToken(accessToken));\r\n    \r\n\r\n    if (!accessToken || tokenCheck.error) {\r\n        await localStorage.removeItem('access_token');\r\n        const searchParams = new URLSearchParams(window.location.search);\r\n        const code = await searchParams.get('code');\r\n        if (!code) {\r\n            const results = await axios.get(\r\n                'https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-auth-url'\r\n            );\r\n            const { authUrl } = results.data;\r\n            return (window.location.href = authUrl);\r\n        }\r\n        return code && getToken(code);\r\n    }\r\n    return accessToken;\r\n};\r\n\r\nexport const getEvents = async () => {\r\n    NProgress.start();\r\n\r\n    if (window.location.href.startsWith('http://localhost')) {\r\n        NProgress.done();\r\n        return mockData;\r\n    }\r\n\r\n    if (!navigator.onLine) {\r\n        console.log('Im offline');\r\n        const data = await localStorage.getItem(\"lastEvents\");\r\n        NProgress.done();\r\n        return data ? JSON.parse(data).events : [];\r\n    }\r\n\r\n    const token = await getAccessToken();\r\n\r\n    if (token) {\r\n        console.log('getEvents token: ', token)\r\n        removeQuery();\r\n        const url = `https://317h4535nd.execute-api.eu-west-3.amazonaws.com/dev/api/get-events/${token}`;\r\n        const result = await axios.get(url);\r\n        if (result.data) {\r\n            var locations = extractLocations(result.data.events);\r\n            localStorage.setItem('lastEvents', JSON.stringify(result.data));\r\n            localStorage.setItem('locations', JSON.stringify(locations));\r\n        }\r\n        NProgress.done();\r\n        return result.data.events;\r\n    }\r\n\r\n};\r\n\r\n// export const getEvents = async () => {\r\n//     return mockData;\r\n// };\r\n\r\nconst removeQuery = () => {\r\n    if (window.history.pushState && window.location.pathname) {\r\n        var newurl =\r\n            window.location.protocol +\r\n            '//' +\r\n            window.location.host +\r\n            window.location.pathname;\r\n            window.history.pushState('', '', newurl);\r\n    } else {\r\n        newurl = \r\n            window.location.protocol + '//' + \r\n            window.location.host;\r\n            window.history.pushState('', '', newurl);\r\n    }\r\n};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}